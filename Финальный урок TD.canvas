{
	"nodes":[
		{"id":"f9597069ed785fb3","x":-220,"y":-520,"width":400,"height":400,"type":"file","file":"round module.md"},
		{"id":"064e4df0580abdd8","x":260,"y":-520,"width":760,"height":1200,"color":"1","type":"file","file":"shopServer module.md"},
		{"id":"f1efbe9e34a75de4","x":260,"y":760,"width":760,"height":740,"color":"4","type":"file","file":"shopServer module.md"},
		{"id":"c463ac2dc49da8ae","x":-880,"y":-520,"width":390,"height":900,"type":"text","text":"- [ ] Исправляем ошибку в голосовании\n- [ ] Допиливаем shopServer\n- [ ] Для того, чтобы работало всё исправно, включаем в лобби комнате в настройках безопасности (settings/security) поддержку API-лок, или Enable Studio Access to API Services\n- [ ] После этого начинаем прописывать нашу функцию загрузки данных игроков\n- [ ] После прописи функций сохранения и загрузки данных игрока - заменяем `defaultData` на `data[player.UserId]`\n- [ ] Старое defaultData удаляем, т.к. содержимое его мы перенесли в функцию получения данных по игроку\n- [ ] Допилим сохранение данных в скрипте после функции сохранения данных в БД\n- [ ] Для надёжности, мы добавим RunService, чтобы уточнить - сохранять данные при закрытии клиента игры, а не завершении игры в студии\n- [ ] После всех наших манипуляций, публикуем в роблоксе новую версию через publish to Roblox\n- [ ] После этого переходим в саму игру\n- [ ] Открываем скрипт GameController и начинаем его править\n- [ ] Для начала, копируем наш shopServer с лобби комнаты и вставляем его в ServerScriptService\n- [ ] Переименовываем его в Datastore\n- [ ] Чистим и правим\n- [ ] "},
		{"id":"e2ff9d37ebbb1289","x":258,"y":1591,"width":762,"height":769,"color":"2","type":"file","file":"shopServer module.md"},
		{"id":"84637cdb2995540e","x":258,"y":2520,"width":762,"height":1540,"color":"5","type":"file","file":"shopServer module.md"},
		{"id":"3e37b586e15592ae","x":1340,"y":-520,"width":860,"height":400,"type":"file","file":"GameController local.md"},
		{"id":"7dc8f0c03f62abe1","x":2337,"y":-520,"width":483,"height":400,"color":"6","type":"text","text":"Удаляем следующие оттуда функции: \n1) getItemStatus\n2) getInteractItem\nДобавляем новую RemoteFunction в ReplicatedStorage/Functions под названием GetData\n3) удаляем tower из скрипта\n4) создаём local functions = ReplicatedStorage:WaitForChild(\"Functions\")\n   local events = ReplicatedStorage:WaitForChild(\"Events\")\n   local getDataFunction = functions:WaitForChild(\"GetData\")\n   local exitGameEvent = events:WaitForChild(\"ExitGame\")\nПосле этого привязываем событие выхода из игры\n\n```lua\nexitGameEvent.OnServerEvent:Connect(function(player)\n\t-- Содержимое ниже функции\nend)\nPlayers.PlayerRemoving:Connect(function (player) ...\n```\n5) Саму функцию после удаляем\n6) ReplicatedStorage... -> getDataFunction"}
	],
	"edges":[
		{"id":"9e7a9a066cda8762","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"f9597069ed785fb3","toSide":"left"},
		{"id":"e794c43746288aa1","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"064e4df0580abdd8","toSide":"left","color":"1"},
		{"id":"2d8a0e7c608e74a1","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"f1efbe9e34a75de4","toSide":"left","color":"4"},
		{"id":"719e82b07114fe32","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"e2ff9d37ebbb1289","toSide":"left","color":"2"},
		{"id":"d86c03e392a7cf0c","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"84637cdb2995540e","toSide":"left","color":"5"},
		{"id":"2e2160eec20f49b3","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"3e37b586e15592ae","toSide":"left"},
		{"id":"93cbbb6b54fd3fe5","fromNode":"c463ac2dc49da8ae","fromSide":"right","toNode":"7dc8f0c03f62abe1","toSide":"left","color":"6"}
	]
}